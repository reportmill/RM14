/*
 * Copyright (c) 2010, ReportMill Software. All rights reserved.
 */
package snap.parse;
import java.lang.reflect.Constructor;
import snap.util.ClassUtils;

/**
 * A class called when child rules are parsed.
 */
public class ParseHandler <T> {

    // The part generated by this handler
    public T         _part;
    
    // The token where the current part started
    Token            _startToken;
    
    // The backup handler
    ParseHandler     _backupHandler;

/**
 * Called when a child rule has been successfully parsed into given node.
 */
protected void parsedOne(ParseNode aNode)
{
    if(_startToken==null) _startToken = aNode.getStartToken();
    parsedOne(aNode, aNode.getId());
}

/**
 * Called when a child rule has been successfully parsed into given node.
 */
protected void parsedOne(ParseNode aNode, String anId)  { }

/**
 * Called when all child rules have been successfully parsed.
 */
public T parsedAll()  { T part = _part; _part = null; _startToken = null; return part; }

/**
 * Returns the part.
 */
public T getPart()  { return _part!=null? _part : (_part=createPart()); }

/**
 * Creates the part.
 */
protected T createPart()
{
    try { return getPartClass().newInstance(); }
    catch(Exception e) { throw new RuntimeException(e); }
}

/**
 * Returns the part class.
 */
protected Class<T> getPartClass()  { return ClassUtils.getTypeParameterClass(getClass()); }

/**
 * Returns the token where the current part started.
 */
public Token getStartToken()  { return _startToken; }

/**
 * Returns whether handler is currently in use.
 */
public boolean inUse()  { return _startToken!=null; }

/**
 * Returns a backup handler.
 */
public ParseHandler getBackupHandler()
{
    if(_backupHandler==null) try {
        Constructor constr = getClass().getDeclaredConstructor();
        constr.setAccessible(true);
        _backupHandler = (ParseHandler)constr.newInstance();
    }
    catch(Exception e) { throw new RuntimeException(e); }
    return _backupHandler;
}

}